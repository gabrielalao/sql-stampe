#!/bin/bash
# ----------------------------------------------------------------------------
#  Copyright 2001-2006 The Apache Software Foundation.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ----------------------------------------------------------------------------
#
#   Copyright (c) 2001-2006 The Apache Software Foundation.  All rights
#   reserved.

[ "$DEBUG" == "true" ] && set -x
[ "$DEBUG" == "true" ] && set -v
set -e

# resolve links - $0 may be a softlink
PRG="$0"
PRG=`which $PRG`

while [ -h "$PRG" ]; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done

PRGDIR=`dirname "$PRG"`
BASEDIR=`cd "$PRGDIR/.." >/dev/null; pwd`

if ! (set -e; for p in "$@"; do ! echo "$p" | grep -q "^-h$\|^--help$"; done)
then
    echo "Usage: $0 [<@{assembler.fullName}'s parameter>, ...]"
    echo
    echo "To get available parameters: @{assembler.name} -h"
    exit
fi

if ! (set -e; for p in "$@"; do ! echo "$p" | grep -q "^--version$"; done)
then
    echo "@{project.version}"
    exit
fi

if [ -z "$ADMIN_USER" ]
then
    ADMIN_USER="postgres"
fi
POSTGRES_ADMIN_USER="$ADMIN_USER"
if [ -z "$POSTGRES_ADMIN_DATABASE" ]
then
    POSTGRES_ADMIN_DATABASE=template1
fi

if [ "$(whoami)" != "root" ] && [ "$(whoami)" != "$ADMIN_USER" ]
then
    echo "You must run this command as root or as $ADMIN_USER" >&2
    exit 1
fi

if [ -z "$INTERACTIVE" ] || [ "$INTERACTIVE" != "true" ]
then
    INTERACTIVE="false"
fi

if [ -z "$TORO_USER" ]
then
    TORO_USER="$(whoami)"
else
    if ! id $TORO_USER > /dev/null
    then
        echo "User $TORO_USER not found" >&2
        exit 1
    fi
fi

if ! which psql > /dev/null
then
    echo "psql command not installed or not in the path" >&2
    exit 1
fi

psql_command="$(which psql)"
exec_admin_command=(su -p -s /bin/bash "$ADMIN_USER" -c)
exec_user_command=(su -p -s /bin/bash "$TORO_USER" -c)

for invalid_parameter in -l --print-config -lx --print-xml-config\
    -lp --print-param -hp --help-param -W --ask-for-password
do
    if echo ' '"$@"' ' | grep -q -- "\s$invalid_parameter\s"
    then
        echo "Invalid parameter $invalid_parameter" >&2
        exit 1
    fi
done

if [ -z "$TOROCMD" ]
then
    TOROCMD="$PRGDIR/@{assembler.name}"
fi

TORO_PARAMS="$("$TOROCMD" "$@" \
    -lp /backend/postgres/host \
    -lp /backend/postgres/port \
    -lp /backend/postgres/database \
    -lp /backend/postgres/user \
    -lp /backend/postgres/toropassFile \
    -lp /replication/syncSource \
    -lp /replication/replSetName \
    -lp /replication/ssl/enabled \
    -lp /replication/ssl/allowInvalidHostnames \
    -lp /replication/ssl/trustStoreFile \
    -lp /replication/ssl/trustStorePassword \
    -lp /replication/ssl/keyStoreFile \
    -lp /replication/ssl/keyStorePassword \
    -lp /replication/ssl/keyPassword \
    -lp /replication/ssl/fipsMode \
    -lp /replication/ssl/caFile \
    -lp /replication/auth/mode \
    -lp /replication/auth/user \
    -lp /replication/auth/source \
    -lp /replication/mongopassFile|sed 's/\\,/#/g')"
POSTGRES_HOST="$(echo "$TORO_PARAMS"|cut -d ',' -f 1 | sed 's/#/,/g')"
POSTGRES_PORT="$(echo "$TORO_PARAMS"|cut -d ',' -f 2 | sed 's/#/,/g')"
POSTGRES_DATABASE="$(echo "$TORO_PARAMS"|cut -d ',' -f 3 | sed 's/#/,/g')"
POSTGRES_USER="$(echo "$TORO_PARAMS"|cut -d ',' -f 4 | sed 's/#/,/g')"
TOROPASSFILE="$(echo "$TORO_PARAMS"|cut -d ',' -f 5 | sed 's/#/,/g')"
MONGO_HOST="$(echo "$TORO_PARAMS"|cut -d ',' -f 6|cut -d ':' -f 1 | sed 's/#/,/g')"
MONGO_HOST="${MONGO_HOST:-localhost}"
MONGO_PORT="$(echo "$TORO_PARAMS"|cut -d ',' -f 6|cut -d ':' -f 2 | sed 's/#/,/g')"
MONGO_PORT="${MONGO_PORT:-27017}"
MONGO_REPL_SET_NAME="$(echo "$TORO_PARAMS"|cut -d ',' -f 7 | sed 's/#/,/g')"
MONGO_SSL_ENABLED="$(echo "$TORO_PARAMS"|cut -d ',' -f 8 | sed 's/#/,/g')"
MONGO_SSL_ALLOW_INVALID_HOSTNAME="$(echo "$TORO_PARAMS"|cut -d ',' -f 9 | sed 's/#/,/g')"
MONGO_SSL_TRUST_STORE_FILE="$(echo "$TORO_PARAMS"|cut -d ',' -f 10 | sed 's/#/,/g')"
MONGO_SSL_TRUST_STORE_PASSWORD="$(echo "$TORO_PARAMS"|cut -d ',' -f 11 | sed 's/#/,/g')"
MONGO_SSL_KEY_STORE_FILE="$(echo "$TORO_PARAMS"|cut -d ',' -f 12 | sed 's/#/,/g')"
MONGO_SSL_KEY_STORE_PASSWORD="$(echo "$TORO_PARAMS"|cut -d ',' -f 13 | sed 's/#/,/g')"
MONGO_SSL_KEY_PASSWORD="$(echo "$TORO_PARAMS"|cut -d ',' -f 14 | sed 's/#/,/g')"
MONGO_SSL_FIPS_MODE="$(echo "$TORO_PARAMS"|cut -d ',' -f 15 | sed 's/#/,/g')"
MONGO_SSL_CA_FILE="$(echo "$TORO_PARAMS"|cut -d ',' -f 16 | sed 's/#/,/g')"
MONGO_AUTH_MODE="$(echo "$TORO_PARAMS"|cut -d ',' -f 17 | sed 's/#/,/g')"
declare -A MONGO_AUTH_MECHANISMS
MONGO_AUTH_MECHANISMS["negotiate"]="SCRAM-SHA-1"
MONGO_AUTH_MECHANISMS["cr"]="MONGODB-CR"
MONGO_AUTH_MECHANISMS["x509"]="MONGODB-X509"
MONGO_AUTH_MECHANISMS["scram_sha1"]="SCRAM-SHA-1"
MONGO_AUTH_USER="$(echo "$TORO_PARAMS"|cut -d ',' -f 18 | sed 's/#/,/g')"
MONGO_AUTH_SOURCE="$(echo "$TORO_PARAMS"|cut -d ',' -f 19 | sed 's/#/,/g')"
MONGOPASSFILE="$(echo "$TORO_PARAMS"|cut -d ',' -f 20 | sed 's/#/,/g')"
PGPASSFILE="$([ -z "$PGPASSFILE" ] && echo "$HOME/.pgpass" || echo "$PGPASSFILE")"

function random_string {
    base64 < /dev/urandom 2>/dev/null | tr -dc A-Za-z0-9_ 2>/dev/null | head -c 10 2>/dev/null
}

TORO_DATABASE_AND_USER_CONFIGURED=false
if $INTERACTIVE
then
    while true
    do
        echo "Configure PostgreSQL's connection for @{assembler.fullName}:"
        read -p "Type a different PostgreSQL's host or enter to continue [$POSTGRES_HOST]:" VALUE
        POSTGRES_HOST=${VALUE:-$POSTGRES_HOST}
        read -p "Type a different PostgreSQL's port or enter to continue [$POSTGRES_PORT]:" VALUE
        POSTGRES_PORT=${VALUE:-$POSTGRES_PORT}
        read -p "Type a different PostgreSQL's database or enter to continue [$POSTGRES_DATABASE]:" VALUE
        POSTGRES_DATABASE=${VALUE:-$POSTGRES_DATABASE}
        
        while true
        do
            read -p "Do you have configured @{assembler.fullName}'s database and user [Y/n]?" VALUE
            if [ -z "$VALUE" ] || [ "$VALUE" == "y" ]
            then
                TORO_DATABASE_AND_USER_CONFIGURED=true
                echo
                break
            fi
            
            if [ "$VALUE" == "n" ]
            then
                break
            fi
        done
        
        if ! $TORO_DATABASE_AND_USER_CONFIGURED && \
            ! "$psql_command" --no-readline -w -U "$POSTGRES_ADMIN_USER" -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -d "$POSTGRES_ADMIN_DATABASE" -c "SELECT 1" > /dev/null 2>&1 \
            && ! (ping -c 1 "$POSTGRES_HOST" 2>/dev/null|head -n 1|grep -q "(127.0.[01].1)" 2>/dev/null \
                && "${exec_admin_command[@]}" "$psql_command --no-readline -w -c 'SELECT 1'")
        then
            echo
            echo "Can not connect to PostgreSQL $POSTGRES_HOST:$POSTGRES_PORT with user $POSTGRES_ADMIN_USER:"
            "$psql_command" --no-readline -w -U "$ADMIN_USER" -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -d "$POSTGRES_ADMIN_DATABASE" -c "SELECT 1" > /dev/null || true
            echo
            echo "Configure PostgreSQL's administrator user to setup database for @{assembler.fullName}:"
            read -p "Type a different PostgreSQL's administrator user or enter to continue [$POSTGRES_ADMIN_USER]:" VALUE
            POSTGRES_ADMIN_USER=${VALUE:-$POSTGRES_ADMIN_USER}
            read -s -p "Type password for PostgreSQL's administrator user $POSTGRES_ADMIN_USER:" VALUE
            echo
            POSTGRES_ADMIN_PASSWORD=$VALUE
            TMPPGPASSFILE="/tmp/$(random_string)"
            (
                echo "$POSTGRES_HOST:$POSTGRES_PORT:*:$POSTGRES_ADMIN_USER:$POSTGRES_ADMIN_PASSWORD"
                if [ -f "$PGPASSFILE" ]
                then
                    cat "$PGPASSFILE"
                fi
            ) > "$TMPPGPASSFILE" 
            chmod 0600 "$TMPPGPASSFILE"
            if bash -c "PGPASSFILE='$TMPPGPASSFILE' $psql_command --no-readline -w -U '$POSTGRES_ADMIN_USER' -h '$POSTGRES_HOST' -p '$POSTGRES_PORT' -d '$POSTGRES_ADMIN_DATABASE' -c 'SELECT 1'" > /dev/null 2>&1
            then
                echo "Creating entry for user $POSTGRES_ADMIN_USER in $PGPASSFILE"
                mv "$TMPPGPASSFILE" "$PGPASSFILE"
                break;
            else
                echo "Can not connect to PostgreSQL at $POSTGRES_HOST:$POSTGRES_PORT with user $POSTGRES_ADMIN_USER and supplied credentials:"
                bash -c "PGPASSFILE='$TMPPGPASSFILE' $psql_command --no-readline -w -U '$POSTGRES_ADMIN_USER' -h '$POSTGRES_HOST' -p '$POSTGRES_PORT' -d '$POSTGRES_ADMIN_DATABASE' -c 'SELECT 1'" > /dev/null
                while true
                do
                    read -p "Do you want to retry [Y/n]?" VALUE
                    if [ -z "$VALUE" ] || [ "$VALUE" == "y" ]
                    then
                        echo
                        break
                    fi
                    
                    if [ "$VALUE" == "n" ]
                    then
                        exit 1
                    fi
                done
            fi
        else
            break
        fi
    done
fi

PSQL_OPTIONS=()
if ! $TORO_DATABASE_AND_USER_CONFIGURED && \
    "$psql_command" --no-readline -w -U "$POSTGRES_ADMIN_USER" -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -d "$POSTGRES_ADMIN_DATABASE" -c "SELECT 1" > /dev/null 2>&1
then
    PSQL_OPTIONS+=("'-U'")
    PSQL_OPTIONS+=("'$POSTGRES_ADMIN_USER'")
    PSQL_OPTIONS+=("'-h'")
    PSQL_OPTIONS+=("'$POSTGRES_HOST'")
    PSQL_OPTIONS+=("'-p'")
    PSQL_OPTIONS+=("'$POSTGRES_PORT'")
    ADMIN_USER="root"
    exec_admin_command=(bash -c)
    exec_user_command=(bash -c)
fi

if $INTERACTIVE
then
    echo
    echo "Configure PostgreSQL's user for @{assembler.fullName}:"
    read -p "Type a different PostgreSQL's user or enter to continue [$POSTGRES_USER]:" VALUE
    POSTGRES_USER=${VALUE:-$POSTGRES_USER}
    TORODB_BACKEND_CONFIGURED=false
    if [ -f "$TOROPASSFILE" ] && grep -q "^\(\*\|$POSTGRES_HOST\):\(\*\|$POSTGRES_PORT\):[^:]\+:\(\*\|$POSTGRES_USER\):" "$TOROPASSFILE"
    then
        TORODB_BACKEND_PASSWORD="$(grep "^\(\*\|$POSTGRES_HOST\):\(\*\|$POSTGRES_PORT\):[^:]\+:\(\*\|$POSTGRES_USER\):" "$TOROPASSFILE"|head -n 1|cut -d ':' -f 5)"
        while true
        do
            read -p "Use current password for PostgreSQL's user $POSTGRES_USER [Y/n]:" VALUE
            if [ -z "$VALUE" ] || [ "$VALUE" == "y" ]
            then
                break
            fi
            
            if [ "$VALUE" == "n" ]
            then
                read -s -p "Type password for PostgreSQL's user $POSTGRES_USER:" VALUE
                echo
                TORODB_BACKEND_PASSWORD=$VALUE
                break
            fi
        done
    else
        while true
        do
            if $TORO_DATABASE_AND_USER_CONFIGURED
            then
                VALUE=n
            else
                read -p "Auto generate password for PostgreSQL's user $POSTGRES_USER [Y/n]:" VALUE
                if [ -z "$VALUE" ] || [ "$VALUE" == "y" ]
                then
                    TORODB_BACKEND_PASSWORD=
                    break
                fi
            fi
            
            if [ "$VALUE" == "n" ]
            then
                read -s -p "Type password for PostgreSQL's user $POSTGRES_USER:" VALUE
                echo
                TORODB_BACKEND_PASSWORD=$VALUE
                break
            fi
        done
    fi
else
    if [ -f "$TOROPASSFILE" ] && grep -q "^\(\*\|$POSTGRES_HOST\):\(\*\|$POSTGRES_PORT\):[^:]\+:\(\*\|$POSTGRES_USER\):" "$TOROPASSFILE"
    then
        TORODB_BACKEND_PASSWORD="$(grep "^\(\*\|$POSTGRES_HOST\):\(\*\|$POSTGRES_PORT\):[^:]\+:\(\*\|$POSTGRES_USER\):" "$TOROPASSFILE"|head -n 1|cut -d ':' -f 5)"
    fi
fi

if "$TORO_DATABASE_AND_USER_CONFIGURED" || \
    "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d "$POSTGRES_ADMIN_DATABASE" -c 'SELECT 1'" > /dev/null 2>&1
then
    if [ -z "$TORODB_BACKEND_PASSWORD" ]
    then
        echo "Generating password for user $POSTGRES_USER"
        TORODB_BACKEND_PASSWORD=$(random_string)
    fi
    if [ ! -f "$TOROPASSFILE" ] || ! grep -q "^\(\*\|$POSTGRES_HOST\):\(\*\|$POSTGRES_PORT\):\(\*\|$POSTGRES_DATABASE\):\(\*\|$POSTGRES_USER\):$TORODB_BACKEND_PASSWORD" "$TOROPASSFILE"
    then
        echo "Creating entry for user $POSTGRES_USER in $TOROPASSFILE"
        TMPTOROPASSFILE="/tmp/$(random_string)"
        (
            echo "$POSTGRES_HOST:$POSTGRES_PORT:$POSTGRES_DATABASE:$POSTGRES_USER:$TORODB_BACKEND_PASSWORD"
            if [ -f "$TOROPASSFILE" ]
            then
                cat "$TOROPASSFILE"
            fi
        ) > "$TMPTOROPASSFILE" 
        mv "$TMPTOROPASSFILE" "$TOROPASSFILE"
    fi
    chmod 0600 "$TOROPASSFILE"
    if [ "$(whoami)" != "$TORO_USER" ]
    then
        chown "$TORO_USER" "$TOROPASSFILE"
    fi
    
    if ! "$TORO_DATABASE_AND_USER_CONFIGURED"
    then
        if [ "1" != "$("${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -A -t -d "$POSTGRES_ADMIN_DATABASE" -c 'SELECT 1 FROM pg_user WHERE usename = '"'"'"'$POSTGRES_USER'"'"'"' LIMIT 1'")" ]
        then
            echo "Creating $POSTGRES_USER user"
            "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d "$POSTGRES_ADMIN_DATABASE" -c 'CREATE USER "'"'"$POSTGRES_USER"'"'" WITH PASSWORD '"'"'"'$TORODB_BACKEND_PASSWORD'"'"'
        else
            echo "User $POSTGRES_USER already exists. Skipping creation"
            echo "Resetting $POSTGRES_USER password"
            "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d "$POSTGRES_ADMIN_DATABASE" -c 'ALTER USER "'"'"$POSTGRES_USER"'"'" WITH PASSWORD '"'"'"'$TORODB_BACKEND_PASSWORD'"'"'
        fi
        
        if [ "1" != "$("${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -A -t -d '$POSTGRES_ADMIN_DATABASE' -c 'SELECT 1 FROM pg_database WHERE datname = '"'"'"'$POSTGRES_DATABASE'"'"'"' LIMIT 1'")" ]
        then
            echo "Creating $POSTGRES_DATABASE database"
            "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d '$POSTGRES_ADMIN_DATABASE' -c 'CREATE DATABASE "'"'"$POSTGRES_DATABASE"'"'" WITH OWNER "'"'"$POSTGRES_USER"'"'"'"
        else
            echo "Database $POSTGRES_DATABASE already exists. Skipping creation"
            echo "Making $POSTGRES_USER owner of $POSTGRES_DATABASE"
            "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d '$POSTGRES_ADMIN_DATABASE' -c 'ALTER DATABASE "'"'"$POSTGRES_DATABASE"'"'" OWNER TO "'"'"$POSTGRES_USER"'"'"'"
            echo "Granting ALL to $POSTGRES_USER for existing schemas of $POSTGRES_DATABASE"
            for POSTGRES_SCHEMA in $("${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -A -t -d '$POSTGRES_DATABASE' -c 'SELECT nspname FROM pg_namespace'"|grep -v "^pg_\|^public$\|^information_schema$")
            do
                "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d '$POSTGRES_DATABASE' -c 'ALTER SCHEMA "'"'"$POSTGRES_SCHEMA"'"'" OWNER TO "'"'"$POSTGRES_USER"'"'"'"
                "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d '$POSTGRES_DATABASE' -c 'GRANT ALL ON ALL TABLES IN SCHEMA "'"'"$POSTGRES_SCHEMA"'"'" TO "'"'"$POSTGRES_USER"'"'"'"
                "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d '$POSTGRES_DATABASE' -c 'GRANT ALL ON ALL SEQUENCES IN SCHEMA "'"'"$POSTGRES_SCHEMA"'"'" TO "'"'"$POSTGRES_USER"'"'"'"
                "${exec_admin_command[@]}" "$psql_command --no-readline -w ${PSQL_OPTIONS[*]} -d '$POSTGRES_DATABASE' -c 'GRANT ALL ON ALL FUNCTIONS IN SCHEMA "'"'"$POSTGRES_SCHEMA"'"'" TO "'"'"$POSTGRES_USER"'"'"'"
            done
        fi
    fi
else
    echo >&2
    echo "Connection to PostgreSQL $POSTGRES_HOST:$POSTGRES_PORT database $POSTGRES_DATABASE with user $POSTGRES_ADMIN_USER has failed!" >&2
    echo >&2
    echo "Please, check PostgreSQL is running and, if connecting with TCP, the password for user $POSTGRES_ADMIN_USER is correctly configured in $PGPASSFILE" >&2
    echo "Remember to set file permission correctly to 0600:" >&2 
    echo "chmod 0600 $PGPASSFILE" >&2 
    echo >&2
    echo "To specify a user different than $POSTGRES_ADMIN_USER to setup @{assembler.fullName} specify it with environment variable ADMIN_USER:" >&2
    echo "export ADMIN_USER=<PostgreSQL's administrator user name>" >&2
    exit 1
fi

if ! "${exec_user_command[@]}" "PGPASSFILE='$TOROPASSFILE' $psql_command --no-readline -w -U $POSTGRES_USER -h '$POSTGRES_HOST' -p '$POSTGRES_PORT' -d '$POSTGRES_DATABASE' -c 'SELECT 1'" > /dev/null 2>&1
then
    echo >&2
    echo "Connection to PostgreSQL $POSTGRES_HOST:$POSTGRES_PORT database $POSTGRES_DATABASE with user $POSTGRES_USER has failed!" >&2
    echo >&2
    echo "Please, check PostgreSQL's connection parameters and security restrictions (see pg_hba.conf file in your PostgreSQL installation)." >&2
    echo >&2
    echo "Password for user $POSTGRES_USER must be configured in $TOROPASSFILE" >&2
    echo "Remember to set file permission correctly to 0600:" >&2 
    echo "chmod 0600 $TOROPASSFILE" >&2
    echo >&2
    echo "To specify a user different than $POSTGRES_USER to connect @{assembler.fullName} to PostgreSQL specify it with --backend-user parameter:" >&2
    echo "$0 --backend-user <PostgreSQL's user name>" >&2 
    exit 1
fi

if [ -z "$TOROCONFIG" ]
then
  TOROCONFIG="$BASEDIR"/conf/@{assembler.name}.yml
fi

mongo_command="$(which mongo)"

if $INTERACTIVE
then
    FORCE_WRITE_CONFIG=false
    while true
    do
        echo
        echo "Configure sync source MongoDB's connection for @{assembler.fullName}:"
        read -p "Type a different MongoDB's host or enter to continue [$MONGO_HOST]:" VALUE
        MONGO_HOST=${VALUE:-$MONGO_HOST}
        read -p "Type a different MongoDB's port or enter to continue [$MONGO_PORT]:" VALUE
        MONGO_PORT=${VALUE:-$MONGO_PORT}
        read -p "Type a different MongoDB's replica set name or enter to continue [$MONGO_REPL_SET_NAME]:" VALUE
        MONGO_REPL_SET_NAME=${VALUE:-$MONGO_REPL_SET_NAME}
        
        MONGO_OPTIONS=()
        
        if $MONGO_SSL_ENABLED
        then
            MONGO_OPTIONS+=("--ssl")
        fi
        
        if $MONGO_SSL_ALLOW_INVALID_HOSTNAME
        then
            MONGO_OPTIONS+=("--sslAllowInvalidHostnames")
        fi
        
        if [ ! -z "$MONGO_SSL_CA_FILE" ]
        then
            MONGO_OPTIONS+=("--sslCAFile" "$MONGO_SSL_CA_FILE")
        else
            if [ ! -z "$MONGO_SSL_TRUST_STORE_FILE" ]
            then
                MONGO_SSL_CA_FILE_TEMP="/tmp/$(random_string)"
                keytool -exportcert \
                    -keystore "$MONGO_SSL_TRUST_STORE_FILE" \
                    -storepass "$MONGO_SSL_TRUST_STORE_PASSWORD" \
                    -alias "$(keytool -list \
                        -keystore "$MONGO_SSL_TRUST_STORE_FILE" \
                        -storepass "$MONGO_SSL_TRUST_STORE_PASSWORD"|\
                        tail -n +7|head -n 1|cut -d ',' -f 1)" |\
                        openssl x509 -inform der > "$MONGO_SSL_CA_FILE_TEMP"
                MONGO_OPTIONS+=("--sslCAFile" "$MONGO_SSL_CA_FILE_TEMP")
            fi
        fi
        
        if [ ! -z "$MONGO_SSL_KEY_STORE_FILE" ]
        then
            MONGO_SSL_PK12_KEY_FILE_TEMP="/tmp/$(random_string)"
            MONGO_SSL_KEY_FILE_TEMP="/tmp/$(random_string)"
            keytool -importkeystore \
                -srckeystore "$MONGO_SSL_KEY_STORE_FILE" \
                -destkeystore "$MONGO_SSL_PK12_KEY_FILE_TEMP" \
                -deststoretype PKCS12 \
                -srcalias "$(keytool -list \
                    -keystore "$MONGO_SSL_KEY_STORE_FILE" \
                    -storepass "$MONGO_SSL_KEY_STORE_PASSWORD"|\
                    tail -n +7|head -n 1|cut -d ',' -f 1)" \
                -srcstorepass "$MONGO_SSL_KEY_STORE_PASSWORD" \
                -srckeypass "$MONGO_SSL_KEY_STORE_PASSWORD" \
                -deststorepass "$MONGO_SSL_KEY_STORE_PASSWORD" \
                -destkeypass "$MONGO_SSL_KEY_STORE_PASSWORD"
            openssl pkcs12 -in "$MONGO_SSL_PK12_KEY_FILE_TEMP" \
                -passin pass:"$MONGO_SSL_KEY_STORE_PASSWORD" \
                -passout pass:"$MONGO_SSL_KEY_STORE_PASSWORD" \
                -out "$MONGO_SSL_KEY_FILE_TEMP"
            rm -f "$MONGO_SSL_PK12_KEY_FILE_TEMP"
            MONGO_OPTIONS+=("--sslPEMKeyFile" "$MONGO_SSL_KEY_FILE_TEMP")
            MONGO_OPTIONS+=("--sslPEMKeyPassword" "$MONGO_SSL_KEY_STORE_PASSWORD")
        fi
        
        if $MONGO_SSL_FIPS_MODE
        then
            MONGO_OPTIONS+=("--sslFIPSMode")
        fi
        
        MONGO_AUTH_COMMAND=""
        if [ "$MONGO_AUTH_MODE" != "disabled" ]
        then
            MONGO_OPTIONS+=("--authenticationMechanism" "${MONGO_AUTH_MECHANISMS[$MONGO_AUTH_MODE]}")
            
            if [ ! -z "$MONGO_AUTH_SOURCE" ]
            then
                MONGO_OPTIONS+=("--authenticationDatabase" "$MONGO_AUTH_SOURCE")
            fi
            
            if [ ! -z "$MONGO_AUTH_USER" ]
            then
                MONGO_OPTIONS+=("--username" "$MONGO_AUTH_USER")
                if [ "$MONGO_AUTH_MODE" != "x509" ]
                then
                    if [ -f "$MONGOPASSFILE" ] && grep -q "^\(\*\|$MONGO_HOST\):\(\*\|$MONGO_PORT\):[^:]\+:\(\*\|$MONGO_AUTH_USER\):" "$MONGOPASSFILE"
                    then
                        MONGO_AUTH_PASSWORD="$(grep "^\(\*\|$MONGO_HOST\):\(\*\|$MONGO_PORT\):[^:]\+:\(\*\|$MONGO_AUTH_USER\):" "$MONGOPASSFILE"|head -n 1|cut -d ':' -f 5)"
                    else
                        read -s -p "Type password for MongoDB's user $MONGO_AUTH_USER:" VALUE
                        echo
                        MONGO_AUTH_PASSWORD=$VALUE
                        echo "Creating entry for user $POSTGRES_USER in $TOROPASSFILE"
                        TMPMONGOPASSFILE="/tmp/$(random_string)"
                        (
                            echo "$MONGO_HOST:$MONGO_PORT:$MONGO_AUTH_SOURCE:$MONGO_AUTH_USER:$MONGO_AUTH_PASSWORD"
                            if [ -f "$MONGOPASSFILE" ]
                            then
                                cat "$MONGOPASSFILE"
                            fi
                        ) > "$TMPMONGOPASSFILE" 
                        mv "$TMPMONGOPASSFILE" "$MONGOPASSFILE"
                        chmod 0600 "$MONGOPASSFILE"
                        if [ "$(whoami)" != "$TORO_USER" ]
                        then
                            chown "$TORO_USER" "$MONGOPASSFILE"
                        fi
                    fi
                    MONGO_OPTIONS+=("--password" "$MONGO_AUTH_PASSWORD")
                fi
            elif [ "$MONGO_AUTH_MODE" == "x509" ]
            then
                MONGO_AUTH_USER="$(openssl x509 -inform PEM -in "$MONGO_SSL_KEY_FILE_TEMP" -text | \
                    grep 'Subject: ' | cut -d ':' -f 2 | sed 's/\(^\s\+\|\s\+$\)//g' | sed 's/,\s\+/,/g')"
                MONGO_OPTIONS+=("--username" "$MONGO_AUTH_USER")
            fi
            MONGO_AUTH_COMMAND="db.getSiblingDB('$MONGO_AUTH_SOURCE').auth({user: '$MONGO_AUTH_USER', $([ -z "$MONGO_AUTH_PASSWORD" ] || echo "pwd: '$MONGO_AUTH_PASSWORD',") mechanism: '${MONGO_AUTH_MECHANISMS[$MONGO_AUTH_MODE]}'});"
        fi
        
        if ! "$mongo_command" --host "$MONGO_HOST" --port "$MONGO_PORT" \
            "${MONGO_OPTIONS[@]}" \
            --eval "$MONGO_AUTH_COMMAND assert(rs.config()._id == '$MONGO_REPL_SET_NAME')" > /dev/null 2>&1
        then
            echo
            echo "There are problems with connection to MongoDB $MONGO_HOST:$MONGO_PORT:"
            "$mongo_command" --host "$MONGO_HOST" --port "$MONGO_PORT" \
                "${MONGO_OPTIONS[@]}" \
                --eval "$MONGO_AUTH_COMMAND assert(rs.config()._id == '$MONGO_REPL_SET_NAME')" || true
            if [ -f "$MONGO_SSL_CA_FILE_TEMP" ]
            then
                rm -f "$MONGO_SSL_CA_FILE_TEMP"
            fi
            if [ -f "$MONGO_SSL_KEY_FILE_TEMP" ]
            then
                rm -f "$MONGO_SSL_KEY_FILE_TEMP"
            fi
            while true
            do
                read -p "Your MongoDB configuration include some authentication mechanism or SSL setup [y/N]:" VALUE
                if [ "$VALUE" == "y" ]
                then
                    while true
                    do
                        read -p "Do you want to use this configuration anyway (you may finish setup manually editing configuration file $TOROCONFIG) [y/N]:" VALUE
                        if [ "$VALUE" == "y" ]
                        then
                            FORCE_WRITE_CONFIG=true
                            break
                        fi
                        
                        if [ -z "$VALUE" ] || [ "$VALUE" == "n" ]
                        then
                            break
                        fi
                    done
                    
                    if $FORCE_WRITE_CONFIG
                    then
                        break
                    fi
                    
                    echo "Please, continue setup @{assembler.fullName} using @{assembler.name}-setup and passing advanced MongoDB connection parameters"
                    echo
                    echo "To get available parameters: @{assembler.name} -h"
                    exit 1
                fi
                
                if [ -z "$VALUE" ] || [ "$VALUE" == "n" ]
                then
                    break
                fi
            done
        else
            if [ -f "$MONGO_SSL_CA_FILE_TEMP" ]
            then
                rm -f "$MONGO_SSL_CA_FILE_TEMP"
            fi
            if [ -f "$MONGO_SSL_KEY_FILE_TEMP" ]
            then
                rm -f "$MONGO_SSL_KEY_FILE_TEMP"
            fi
            break
        fi
        
        if $FORCE_WRITE_CONFIG
        then
            break
        fi
    done
fi

echo "Writing configuration file to $TOROCONFIG"
TORO_OPTIONS=("$@")
for todelete_parameter in --backend-host --backend-port --backend-database --backend-user --sync-source --repl-set-name
do
    for index in "${!TORO_OPTIONS[@]}"
    do
        if [ "${TORO_OPTIONS[$index]}" == "$todelete_parameter" ]
        then
            unset TORO_OPTIONS[$index]
            unset TORO_OPTIONS[$((index+1))]
        fi
    done
done

TMPTOROCONFIG="/tmp/$(random_string)"
if ! bash "$TOROCMD" "${TORO_OPTIONS[@]}" \
    --backend-host "$POSTGRES_HOST" \
    --backend-port "$POSTGRES_PORT" \
    --backend-database "$POSTGRES_DATABASE" \
    --backend-user "$POSTGRES_USER" \
    --sync-source "$MONGO_HOST:$MONGO_PORT" \
    --repl-set-name "$MONGO_REPL_SET_NAME" \
    -l > "$TMPTOROCONFIG"
then
    bash "$TOROCMD" "${TORO_OPTIONS[@]}" \
        --backend-host "$POSTGRES_HOST" \
        --backend-port "$POSTGRES_PORT" \
        --backend-database "$POSTGRES_DATABASE" \
        --backend-user "$POSTGRES_USER" \
        --sync-source "$MONGO_HOST:$MONGO_PORT" \
        --repl-set-name "$MONGO_REPL_SET_NAME" \
        -l || true
    exit 1
fi
mv "$TMPTOROCONFIG" "$TOROCONFIG"
